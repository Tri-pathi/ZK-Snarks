// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;


//This is a simplified version of MIMC
contract MIMC7Hasher {
    //from EIP
    uint256 p =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint8 public constant nRounds = 20;
    uint256[20] c = [
        0,
        15094701712633979350099012269393030856281085401958109394300330875807369155500,
        58822117991709291399958584587878890173462447340810934202916284361020530230644,
        44972321657656701396217128359747377944907050389224098353646131251687892523485,
        96493692533583833094972792594000734718199102111215539717208511322907796674014,
        23666743410824623558636227204903757801699474224294883946610526501881435075378,
        7631509229286711799753025145486014303456800393830722922398447708677119956535,
        73741498870852632128726731486779850740677996774410651950633444069957752439295,
        21476159689809443072097479095588538167124461464465789712443758461766119114744,
        39978761942792309329744876719073439260589034296437776211419688635522452659997,
        25161436470718351277017231215227846535148280460947816286575563945185127975034,
        90370030464179443930112165274275271350651484239155016554738639197417116558730,
        92014788260850167582827910417652439562305280453223492851660096740204889381255,
        40376490640073034398204558905403523738912091909516510156577526370637723469243,
        23701404396950336716716773711829949011495811533827229680198698317488498185005,
        112203415202699791888928570309186854585561656615192232544262649073999791317171,
        114801681136748880679062548782792743842998635558909635247841799223004802934045,
        4118229206495460255026732648766161713581908667345528627339812267008943723621,
        98844069804327418719255803021205697862031345913929363103790182598385469450387,
        4011925251638142722424298635980231878892077318587886982666459906440490374444
    ];


//Takes two inputs and returns two outputs 
//in one Round one signal get hashed so in 20 rounds both signal will be hashed 10 times individually
// k- is trusted random value
    function MiMC7(
        uint256 _iL,
        uint256 _iR,
        uint256 _k
    ) internal view returns (uint256 oL, uint256 oR) {
        uint256 lastL = _iL;
        uint256 lastR = _iR;

        uint256 mask;
        uint256 mask2;
        uint256 mask4;
        uint256 mask6;
        uint256 temp;
//compute 7th power and add last hashed value to it
        for (uint8 i = 0; i < nRounds; i++) {
            mask = addmod(lastR, _k, p); 
            mask = addmod(mask, c[i], p);
            mask2 = mulmod(mask, mask, p);
            mask4 = mulmod(mask2, mask2, p);
            mask6 = mulmod(mask4, mask2, p);

            mask = mulmod(mask6, mask, p);

            temp = lastR;
            lastR = addmod(lastL, mask, p);
            lastL = temp;
        }

        return (lastL, lastR);
    }
//Sponge form if MIMC is used in Tornado cash 
    function MiMC7Sponge(
        uint256[2] memory _ins,
        uint256 _k
    ) external view returns (uint256 h) {
        uint256 lastR = 0;
        uint256 lastC = 0;

        for (uint8 i = 0; i < _ins.length; i++) {
            lastR = addmod(lastR, _ins[i], p);
            (lastR, lastC) = MiMC7(lastR, lastC, _k);
        }

        h = lastR;
    }
}
